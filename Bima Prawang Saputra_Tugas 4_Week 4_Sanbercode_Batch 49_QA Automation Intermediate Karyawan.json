{
  "stats": {
    "suites": 1,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-19T06:50:13.221Z",
    "end": "2023-10-19T06:50:14.985Z",
    "duration": 1764,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "73b4cb26-fd86-4197-91ba-d9a9dbd446fa",
      "title": "",
      "fullFile": "E:\\Sanbercode\\QA Automation Intermediate Karyawan Batch 49 31 Agustus 2023\\Materi dan Tugas\\Minggu 4\\3. Day 8 - Api Automation\\Tugas\\Bima2.js",
      "file": "\\Tugas\\Bima2.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
          "title": "Authorization and User CRUD Tests",
          "fullFile": "E:\\Sanbercode\\QA Automation Intermediate Karyawan Batch 49 31 Agustus 2023\\Materi dan Tugas\\Minggu 4\\3. Day 8 - Api Automation\\Tugas\\Bima2.js",
          "file": "\\Tugas\\Bima2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should register a new user for authorization",
              "fullTitle": "Authorization and User CRUD Tests Should register a new user for authorization",
              "timedOut": false,
              "duration": 438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.post('/registration')\n    .send({\n        \"name\": \"nama Toko\",\n        \"email\": \"sample@ex.com\",\n        \"password\": \"123adsfadf@\"\n    })\n    .expect(201);\n\nconsole.log(\"Response from Registration:\", JSON.stringify(response.body, null, 2));\nexpect(response.body.status).to.equal('success');",
              "err": {},
              "uuid": "0328155b-0150-4e66-8f1f-aba4d2a464f6",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should login and get accessToken",
              "fullTitle": "Authorization and User CRUD Tests Should login and get accessToken",
              "timedOut": false,
              "duration": 399,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.post('/authentications')\n    .send({\n        \"email\": \"sample@ex.com\",\n        \"password\": \"123adsfadf@\"\n    })\n    .expect(201);\n\nconsole.log(\"Response from Login:\", JSON.stringify(response.body, null, 2));\nexpect(response.body.status).to.equal('success');\naccessToken = response.body.data.accessToken;",
              "err": {},
              "uuid": "46d64385-f5cb-4507-86a7-eae7a0a96ef7",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should create a new user",
              "fullTitle": "Authorization and User CRUD Tests Should create a new user",
              "timedOut": false,
              "duration": 380,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.post('/users')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        \"name\": \"kasir-serbaguna\",\n        \"email\": \"sample@example.com\",\n        \"password\": \"123adsfadf@\"\n    })\n    .expect(201);\n\nconsole.log(\"Response from Create User:\", JSON.stringify(response.body, null, 2));\n\n// Memastikan bahwa respons memiliki status \"success\" dan pesan \"User berhasil ditambahkan\"\nexpect(response.body.status).to.equal('success');\nexpect(response.body.message).to.equal('User berhasil ditambahkan');\nexpect(response.body.data.name).to.equal('kasir-serbaguna');\n\nuserId = response.body.data.userId;  // Menyimpan userId untuk tes selanjutnya",
              "err": {},
              "uuid": "a683389f-3b9d-463f-bcca-7b941408c576",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should get user list",
              "fullTitle": "Authorization and User CRUD Tests Should get user list",
              "timedOut": false,
              "duration": 95,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.get('/users?q=kasir-serbaguna&p=1')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\n\nconsole.log(\"Response from Get User List:\", JSON.stringify(response.body, null, 2));\n\n// Memastikan bahwa respons memiliki status \"success\"\nexpect(response.body.status).to.equal('success');\n\n// Memastikan bahwa data pengguna diterima dalam array\nexpect(response.body.data.users).to.be.an('array');\n\n// Memastikan bahwa meta data (informasi navigasi halaman) ada dan sesuai dengan format yang diharapkan\nexpect(response.body.data.meta).to.have.all.keys('totalPages', 'total', 'page');",
              "err": {},
              "uuid": "ac96b1cf-a23b-4335-8102-3c90822b5b0b",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update a user",
              "fullTitle": "Authorization and User CRUD Tests Should update a user",
              "timedOut": false,
              "duration": 72,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.put(`/users/${userId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        \"name\": \"update-user\",\n        \"email\": \"user@example.com\"\n    })\n    .expect(200);\n\nconsole.log(\"Response from Update User:\", JSON.stringify(response.body, null, 2));\n\n// Memastikan bahwa respons memiliki status \"success\" dan pesan yang sesuai\nexpect(response.body.status).to.equal('success');\nexpect(response.body.message).to.equal('User berhasil diupdate');\n\n// Memastikan bahwa nama pengguna telah diperbarui\nexpect(response.body.data.name).to.equal('update-user');",
              "err": {},
              "uuid": "4a6ba84f-7eb0-4058-b515-863cd6b2e775",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete a user",
              "fullTitle": "Authorization and User CRUD Tests Should delete a user",
              "timedOut": false,
              "duration": 68,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.delete(`/users/${userId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .expect(200);\n\nconsole.log(\"Response from Delete User:\", JSON.stringify(response.body, null, 2));\n\n// Memastikan bahwa respons memiliki status \"success\" dan pesan yang sesuai\nexpect(response.body.status).to.equal('success');\nexpect(response.body.message).to.equal('User berhasil dihapus');",
              "err": {},
              "uuid": "35b62546-bce2-4a9e-a31c-b993716db27a",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not create a user with missing fields",
              "fullTitle": "Authorization and User CRUD Tests Should not create a user with missing fields",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.post('/users')\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        \"email\": \"missingFields@example.com\"\n    });\n        \nconsole.log(\"Negative Response from Create User:\", JSON.stringify(response.body, null, 2));\nexpect(response.status).to.not.equal(201);",
              "err": {},
              "uuid": "20a37fe4-aca5-4ba8-8d66-8e0ed961e7f8",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not get user list without authorization",
              "fullTitle": "Authorization and User CRUD Tests Should not get user list without authorization",
              "timedOut": false,
              "duration": 66,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.get('/users?q=kasir-serbaguna&p=1');\n\nconsole.log(\"Negative Response from Get User List:\", JSON.stringify(response.body, null, 2));\nexpect(response.status).to.not.equal(200);",
              "err": {},
              "uuid": "281c98f9-2255-4bec-afb3-62733a690d8b",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not update a user without valid data",
              "fullTitle": "Authorization and User CRUD Tests Should not update a user without valid data",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.put(`/users/${userId}`)\n    .set('Authorization', `Bearer ${accessToken}`)\n    .send({\n        \"name\": \"\"\n    });\n\nconsole.log(\"Negative Response from Update User:\", JSON.stringify(response.body, null, 2));\nexpect(response.status).to.not.equal(200);",
              "err": {},
              "uuid": "778f8cfa-0702-4b3f-a287-26357fc24de5",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not delete a user without authorization",
              "fullTitle": "Authorization and User CRUD Tests Should not delete a user without authorization",
              "timedOut": false,
              "duration": 82,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await api.delete(`/users/${userId}`);\n\nconsole.log(\"Negative Response from Delete User:\", JSON.stringify(response.body, null, 2));\nexpect(response.status).to.not.equal(200);",
              "err": {},
              "uuid": "fd13bca8-c233-4577-85c2-664135fce994",
              "parentUUID": "fe3fadc3-40a7-4d7b-bbd6-14f39954822b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0328155b-0150-4e66-8f1f-aba4d2a464f6",
            "46d64385-f5cb-4507-86a7-eae7a0a96ef7",
            "a683389f-3b9d-463f-bcca-7b941408c576",
            "ac96b1cf-a23b-4335-8102-3c90822b5b0b",
            "4a6ba84f-7eb0-4058-b515-863cd6b2e775",
            "35b62546-bce2-4a9e-a31c-b993716db27a",
            "20a37fe4-aca5-4ba8-8d66-8e0ed961e7f8",
            "281c98f9-2255-4bec-afb3-62733a690d8b",
            "778f8cfa-0702-4b3f-a287-26357fc24de5",
            "fd13bca8-c233-4577-85c2-664135fce994"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1752,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "MyReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportFilename": "MyReport"
      },
      "version": "6.2.0"
    }
  }
}